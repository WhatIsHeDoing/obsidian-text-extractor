import { nodeResolve } from '@rollup/plugin-node-resolve'
import commonjs from '@rollup/plugin-commonjs'
import { base64 } from 'rollup-plugin-base64'
import typescript from 'rollup-plugin-typescript2'
import terser from '@rollup/plugin-terser'
import webWorkerLoader from 'rollup-plugin-web-worker-loader'
import del from 'rollup-plugin-delete'
import json from '@rollup/plugin-json'
import copy from 'rollup-plugin-copy'
import nodePolyfills from 'rollup-plugin-polyfill-node';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`

const production = !process.env.ROLLUP_WATCH

export default {
  input: './src/index.ts',
  output: {
    file: './dist/index.js',
    sourcemap: !production && 'inline',
    format: 'esm',
    // exports: 'default',
    banner,
  },
  onwarn: function(warning, handler) {
    // Skip certain warnings

    // should intercept ... but doesn't in some rollup versions
    if (warning.code === 'THIS_IS_UNDEFINED') { return; }

    // console.warn everything else
    handler(warning);
  },
  external: ['obsidian', 'electron'],
  plugins: [
    // Clean the dist folder before build
    // del({ targets: 'dist/*' }),
    json(),
    commonjs(),
    nodePolyfills(),
    nodeResolve({ browser: true }),
    typescript(),
    base64({ include: '**/*.wasm' }),
    webWorkerLoader({
      inline: true,
      forceInline: true,
      targetPlatform: 'browser',
    }),
    // Minify
    production && terser(),
    // Remove useless declaration files after build
    del({
      hook: 'closeBundle',
      targets: [
        'dist/src/*.d.ts',
        '!dist/src/index.d.ts',
        '!dist/src/types.d.ts',
        '!dist/src/ocr-langs.d.ts',
      ],
    }),
  ],
}
